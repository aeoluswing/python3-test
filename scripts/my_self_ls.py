#!/usr/bin/env python3# -*- coding:utf8 -*-import localelocale.setlocale(locale.LC_ALL, "")from optparse import OptionParserimport osimport datetimedef process_options():    usage = """%prog [options] [path1 [path2 [...pathN]]]The paths are optional;if not given . is used."""    parser = OptionParser(usage=usage)    parser.add_option("-H", "--hidden", action="store_true", dest="hidden",                      help="show hidden files[default: off]")    parser.add_option("-m", "--modified", action="store_true", dest="modified",                      help="show last modified date/time [default: off]")    orderlist = ['name','n','modified','m','size','s']    parser.add_option("-o", "--order", action="store", dest="order", choices=orderlist,                      help="order by({0}) [default:%default]".format(                          ",".join(["'" + x + "'" for x in orderlist])))    parser.add_option("-r", "--recursive", action="store_true", dest="recursive",                      help="recurse into subdirectories [default: off]")    parser.add_option("-s", "--sizes", action="store_true", dest="sizes",                      help="show sizes [default: off]")    parser.set_defaults(order=orderlist[0])    options, args = parser.parse_args()    if not args:        args = ["."]    return options, argsdef main():    count = [0,0]    options,paths = process_options()    if not options.recursive:        filenames = []        dirnames = []        for path in paths:            if os.path.isfile(path):                filenames.append(path)                continue            for name in os.listdir(path):                if not options.hidden and name.startswith("."):                    continue                fullname = os.path.join(path,name)                if fullname.startswith("./"):                    fullname = fullname[2:]                if os.path.isfile(fullname):                    filenames.append(fullname)                else:                    dirnames.append(fullname)        count[0] += len(filenames)        count[1] += len(dirnames)        process_lists(options,filenames,dirnames)    else:        for path in paths:            for root, dirs, files in os.walk(path):                if not options.hidden:                    dirs[:] = [dir for dir in dirs if not dir.startswith(".")]                filenames = []                for name in files:                    if not options.hidden and name.startswith("."):                        continue                    fullname = os.path.join(root,name)                    if fullname.startswith("./"):                        fullname = fullname[2:]                    filenames.append(fullname)                count[0] += len(filenames)                count[1] += len(dirs)                #print                process_lists(options,filenames,[])    print("{0} file{1}, {2} director{3}".format(        "{0:n}".format(count[0]) if count[0] else "no",        "s" if count[0] != 1 else "",        "{0:n}".format(count[1]) if count[1] else "no",        "ies" if count[1] != 1 else "y"    ))def process_lists(opts,filenames,dirnames):    keys_lines = []    for file in filenames:        # modified_timer        modified_timer = ""        if opts.modified:            try:                modified_timer = (datetime.datetime.fromtimestamp(                    os.path.getmtime(file)).isoformat(" ")[:19]+" "                )            except OSError:                modified_timer = "{0:>19}".format("unknown")        # size        size = ""        if opts.sizes:            try:                size = "{0:>15} ".format(os.path.getsize(file))            except OSError:                size = "{0:>15} ".format("unknown")        if os.path.islink(file):            file += "->" + os.path.realpath(file)        if opts.order in {"m","modified"}:            orderKey = modified_timer        if opts.order in {"s","sizes"}:            orderKey = size        else:            orderKey = file        keys_lines.append((orderKey,                          "{modified_timer}{size}{file}"                          .format(**locals())))        size = "" if not opts.sizes else " " * 15        modified_timer = "" if not opts.modified else " " * 20    for name in sorted(dirnames):        keys_lines.append((name,modified_timer + size + name + "/"))    for key,line in sorted(keys_lines):        print(line)main()